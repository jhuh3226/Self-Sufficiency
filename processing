import processing.video.*;

import processing.serial.*;//The serial library is needed to communicate with the Arduino.

import cc.arduino.*;

//import processing.sound.*;
//SoudFile file;

int numPixels;

int[] backgroundPixels;

Capture video;

Movie movie;

int status =0;

int[] trigger;

float presenceSum;

/*

 aruduino code
 
 */




Arduino arduino;//

int poss=0;
//servo position in degrees (0..180)

int[] servoPin = {3, 5, 6, 9, 10, 11};

void setup() {
  noCursor();
  frameRate(10);

  // Change size to 320 x 240 if too slow at 640 x 480

  //size(1280, 720);

  fullScreen();

  trigger = new int[7];

  String[] cameras = Capture.list();

  if (cameras.length == 0) {

    println("There are no cameras available for capture.");

    exit();
  } else {

    println("Available cameras:");

    for (int i = 0; i < cameras.length; i++) {

      println(cameras[i]);
    }




    // The camera can be initialized directly using an

    // element from the array returned by list():

    video = new Capture(this, width, height, cameras[0]);

    video.start();
  }     




  numPixels = video.width * video.height;

  // Create array to store the background image

  backgroundPixels = new int[numPixels];

  // Make the pixels[] array available for direct manipulation

  loadPixels();




  /*

   aruduino code
   
   */

  println(Arduino.list());

  arduino = new Arduino(this, Arduino.list()[Arduino.list().length-1], 57600); //offset may vary

  for (int i=0; i<servoPin.length; i++) arduino.pinMode(servoPin[i], Arduino.SERVO);




  /*

   video code
   
   */
}




void movieEvent(Movie m) {

  m.read();
}




void draw() {

  if (video.available()) {

    video.read(); // Read a new video frame

    video.loadPixels(); // Make the pixels of video available

    // Difference between the current frame and the stored background

    presenceSum = 0;
float maximumColor=0;
float previousColorMag=0;
for (int i = 0; i < numPixels; i++) { // For each pixel in the video frame...
      color currColor = video.pixels[i];
      float currColorMag=sqrt(red(currColor)*red(currColor)+blue(currColor)*blue(currColor)+green(currColor)*green(currColor));
      maximumColor=max(currColorMag,previousColorMag);
      previousColorMag=currColorMag;
}

println(maximumColor);



    for (int i = 0; i < numPixels; i++) { // For each pixel in the video frame...

      // Fetch the current color in that location, and also the color

      // of the background in that spot

      color currColor = video.pixels[i];

      color bkgdColor = backgroundPixels[i];

      // Extract the red, green, and blue components of the current pixelÕs color

      int currR = (currColor >> 16) & 0xFF;

      int currG = (currColor >> 8) & 0xFF;

      int currB = currColor & 0xFF;

      // Extract the red, green, and blue components of the background pixelÕs color

      int bkgdR = (bkgdColor >> 16) & 0xFF;

      int bkgdG = (bkgdColor >> 8) & 0xFF;

      int bkgdB = bkgdColor & 0xFF;

      // Compute the difference of the red, green, and blue values

      int diffR = abs(currR - bkgdR);

      int diffG = abs(currG - bkgdG);

      int diffB = abs(currB - bkgdB);

      // Add these differences to the running tally

      presenceSum += diffR + diffG + diffB;

      // Render the difference image to the screen




      // This is the change I've made:

      int threshold = 100;




      //pixels[i] = (diffR + diffG + diffB) > threshold ? color(255) : color(0);




      // the ? : stuff if you haven't seen it before means -> (is it like this)? yes : no;

      // Because a web cam image tends to be grainy, it means that what we get isn't so clear

      // cut as we would expect - so you use a threshold value to tweak for the output you want
    }

    //updatePixels(); // Notify that the pixels[] array has changed

    println(presenceSum/maximumColor); // Print out the total amount of movement
presenceSum=presenceSum/maximumColor;



    if ((presenceSum>0)&&(presenceSum<160000)) {

      println("number of people = 0");
      println("presenseSum");

      trigger[0]++;

      for (int i=0; i<7; i++) {

        if (i !=0) trigger[i] =0;
      }
    } else if ((presenceSum<160000)&&(presenceSum<280000)) {
       println("presenseSum");

      //println("number of people = 1");

      trigger[1]++;

      for (int i=0; i<7; i++) {

        if (i !=1) trigger[i] =0;
      }
    } else if ((presenceSum>280000)&&(presenceSum<500000)) {
       println("presenseSum");

      //println("number of people = 2");

      trigger[2]++;

      for (int i=0; i<7; i++) {

        if (i !=2) trigger[i] =0;
      }
    } else if ((presenceSum>500000)&&(presenceSum<700000)) {
       println("presenseSum");

      //println("number of people = 3");

      trigger[3]++;

      for (int i=0; i<7; i++) {

        if (i !=3) trigger[i] =0;
      }
    } else if ((presenceSum>700000)&&(presenceSum<900000)) {

      //println("number of people = 4");

      trigger[4]++;

      for (int i=0; i<7; i++) {

        if (i !=4) trigger[i] =0;
      }
    } else if ((presenceSum<900000)&&(presenceSum<1100000)) {
       println("presenseSum");

      //println("number of people = 5");

      trigger[5]++;

      for (int i=0; i<7; i++) {

        if (i !=5) trigger[i] =0;
      }
    } else if ((presenceSum>1100000)) {
       println("presenseSum");

      //println("number of people = 6");

      trigger[6]++;

      for (int i=0; i<7; i++) {

        if (i !=6) trigger[i] =0;
      }
    } else moveservos(0);

    println(trigger);

    for (int i=0; i<7; i++) {

      if (trigger[i]>7 && i+1 != status) {




        moveservos(presenceSum);

        status = i+1;
      }
    }

    if (movie != null) image(movie, 0, 0, width, height);
  }
}




// When a key is pressed, capture the background image into the backgroundPixels

// buffer, by copying each of the current frameÕs pixels into it.

void mouseClicked() {

  video.loadPixels();

  arrayCopy(video.pixels, backgroundPixels);

  println(presenceSum);
}
